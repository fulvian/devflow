#!/usr/bin/env python3
"""
Enforcement Hook - Blocca implementazione diretta e forza delega agli agenti
Architect deve orchestrare, NON implementare direttamente
"""

import sys
import json

def main():
    # Leggi input del tool
    try:
        tool_data = json.loads(sys.stdin.read())
        tool_name = tool_data.get('name', '')
    except:
        tool_name = sys.argv[1] if len(sys.argv) > 1 else ''

    # Tools di implementazione diretta da bloccare
    BLOCKED_TOOLS = [
        'Edit', 'MultiEdit', 'Write', 'NotebookEdit'
    ]
    
    # Agenti di delega consentiti
    ALLOWED_DELEGATION = [
        'mcp__devflow-synthetic-cc-sessions__synthetic_auto_file_dual',
        'mcp__devflow-synthetic-cc-sessions__synthetic_batch_dual', 
        'Task'  # Per altri agenti specializzati
    ]
    
    # MCP tools sempre consentiti
    MCP_TOOLS = [tool for tool in [tool_name] if tool.startswith('mcp__')]
    
    if tool_name in BLOCKED_TOOLS:
        print("‚ùå ARCHITECT DELEGATION ENFORCEMENT")
        print(f"‚ùå Tool '{tool_name}' BLOCKED")
        print("")
        print("üéØ DELEGATION REQUIRED:")
        print("‚Ä¢ Code Implementation ‚Üí mcp__devflow-synthetic-cc-sessions__synthetic_auto_file_dual")
        print("‚Ä¢ Debug/Fix ‚Üí MCP Gemini CLI or synthetic_code agent")
        print("‚Ä¢ Architecture Analysis ‚Üí Task tool with synthetic_reasoning")
        print("‚Ä¢ Large Codebase Analysis ‚Üí Task tool with synthetic_context")
        print("")
        print("üèóÔ∏è You are the ARCHITECT - orchestrate, don't implement!")
        sys.exit(1)
    
    # Consenti tutto il resto (inclusi MCP tools)
    sys.exit(0)

if __name__ == "__main__":
    main()