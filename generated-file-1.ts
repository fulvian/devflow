\n// db/connection.js\nconst sqlite3 = require('sqlite3').verbose();\nconst path = require('path');\n\nclass DatabaseConnection {\n  constructor() {\n    this.db = null;\n  }\n\n  async connect() {\n    const dbPath = path.join(__dirname, '../data/tasks.db');\n    \n    return new Promise((resolve, reject) => {\n      this.db = new sqlite3.Database(dbPath, (err) => {\n        if (err) {\n          console.error('Database connection error:', err.message);\n          reject(err);\n        } else {\n          console.log('Connected to SQLite database');\n          resolve(this.db);\n        }\n      });\n    });\n  }\n\n  async initializeSchema() {\n    const schemaSQL = `\n      CREATE TABLE IF NOT EXISTS tasks (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        title TEXT NOT NULL,\n        description TEXT,\n        status TEXT DEFAULT 'pending',\n        priority INTEGER DEFAULT 1,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        assigned_to INTEGER,\n        project_id INTEGER,\n        FOREIGN KEY (assigned_to) REFERENCES users(id),\n        FOREIGN KEY (project_id) REFERENCES projects(id)\n      );\n      \n      CREATE TABLE IF NOT EXISTS users (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        username TEXT UNIQUE NOT NULL,\n        email TEXT UNIQUE NOT NULL,\n        role TEXT DEFAULT 'developer',\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n      \n      CREATE TABLE IF NOT EXISTS projects (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT NOT NULL,\n        description TEXT,\n        status TEXT DEFAULT 'active',\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n      \n      CREATE INDEX IF NOT EXISTS idx_tasks_status ON tasks(status);\n      CREATE INDEX IF NOT EXISTS idx_tasks_priority ON tasks(priority);\n      CREATE INDEX IF NOT EXISTS idx_tasks_project ON tasks(project_id);\n    `;\n    \n    return new Promise((resolve, reject) => {\n      this.db.exec(schemaSQL, (err) => {\n        if (err) {\n          console.error('Schema initialization error:', err.message);\n          reject(err);\n        } else {\n          console.log('Database schema initialized');\n          resolve();\n        }\n      });\n    });\n  }\n\n  getDB() {\n    return this.db;\n  }\n\n  async close() {\n    return new Promise((resolve, reject) => {\n      if (this.db) {\n        this.db.close((err) => {\n          if (err) {\n            console.error('Database close error:', err.message);\n            reject(err);\n          } else {\n            console.log('Database connection closed');\n            resolve();\n          }\n        });\n      }\n    });\n  }\n}\n\nmodule.exports = DatabaseConnection;\n```\n\n#### 1.3 Data Access Layer\n\n