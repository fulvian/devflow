\n// utils/cache.js\nclass SimpleCache {\n  constructor(ttl = 60000) { // 1 minute default TTL\n    this.cache = new Map();\n    this.ttl = ttl;\n  }\n\n  set(key, value) {\n    const expiry = Date.now() + this.ttl;\n    this.cache.set(key, { value, expiry });\n  }\n\n  get(key) {\n    const item = this.cache.get(key);\n    \n    if (!item) return null;\n    \n    if (Date.now() > item.expiry) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    return item.value;\n  }\n\n  delete(key) {\n    return this.cache.delete(key);\n  }\n\n  clear() {\n    this.cache.clear();\n  }\n\n  size() {\n    // Remove expired items and return count\n    for (const [key, item] of this.cache.entries()) {\n      if (Date.now() > item.expiry) {\n        this.cache.delete(key);\n      }\n    }\n    return this.cache.size;\n  }\n}\n\nmodule.exports = SimpleCache;\n```\n\n