\n// routes/advancedTasks.js\nconst express = require('express');\nconst router = express.Router();\nconst OptimizedTaskService = require('../services/optimizedTaskService');\n\n// Initialize service with Cometa Brain config\nconst taskService = new OptimizedTaskService({\n  apiKey: process.env.COMETA_BRAIN_API_KEY,\n  projectId: process.env.COMETA_BRAIN_PROJECT_ID\n});\n\n// Search endpoint\nrouter.get('/search', async (req, res) => {\n  try {\n    const { q, status, priority, project_id, assigned_to } = req.query;\n    \n    if (!q) {\n      return res.status(400).json({\n        success: false,\n        error: 'Search query (q) is required'\n      });\n    }\n    \n    const filters = {};\n    if (status) filters.status = status;\n    if (priority) filters.priority = parseInt(priority);\n    if (project_id) filters.project_id = parseInt(project_id);\n    if (assigned_to) filters.assigned_to = parseInt(assigned_to);\n    \n    const tasks = await taskService.searchTasks(q, filters);\n    res.json({\n      success: true,\n      data: tasks\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// Statistics endpoint\nrouter.get('/statistics', async (req, res) => {\n  try {\n    const stats = await taskService.getTaskStatistics();\n    res.json({\n      success: true,\n      data: stats\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// Overdue tasks endpoint\nrouter.get('/overdue', async (req, res) => {\n  try {\n    const overdueTasks = await taskService.getOverdueTasks();\n    res.json({\n      success: true,\n      data: overdueTasks\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// Create task with Cometa Brain suggestions\nrouter.post('/smart', async (req, res) => {\n  try {\n    const { taskData, candidates } = req.body;\n    \n    if (!taskData || !taskData.title) {\n      return res.status(400).json({\n        success: false,\n        error: 'Task data with title is required'\n      });\n    }\n    \n    const newTask = await taskService.createTaskWithSuggestions(taskData, candidates);\n    res.status(201).json({\n      success: true,\n      data: newTask\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\nmodule.exports = router;\n```\n\n#### 4.4 API Integration\n\n