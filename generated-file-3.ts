\n// routes/tasks.js\nconst express = require('express');\nconst router = express.Router();\nconst TaskService = require('../services/taskService');\n\n// Initialize service\nconst taskService = new TaskService();\n\n// GET /api/tasks - Retrieve all tasks\nrouter.get('/', async (req, res) => {\n  try {\n    const { status, project_id } = req.query;\n    const filters = {};\n    \n    if (status) filters.status = status;\n    if (project_id) filters.project_id = parseInt(project_id);\n    \n    const tasks = await taskService.getAllTasks(filters);\n    res.json({\n      success: true,\n      data: tasks\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// GET /api/tasks/:id - Retrieve a specific task\nrouter.get('/:id', async (req, res) => {\n  try {\n    const taskId = parseInt(req.params.id);\n    if (isNaN(taskId)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid task ID'\n      });\n    }\n    \n    const task = await taskService.getTaskById(taskId);\n    if (!task) {\n      return res.status(404).json({\n        success: false,\n        error: 'Task not found'\n      });\n    }\n    \n    res.json({\n      success: true,\n      data: task\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// POST /api/tasks - Create a new task\nrouter.post('/', async (req, res) => {\n  try {\n    const taskData = req.body;\n    \n    // Basic validation\n    if (!taskData.title) {\n      return res.status(400).json({\n        success: false,\n        error: 'Title is required'\n      });\n    }\n    \n    const newTask = await taskService.createTask(taskData);\n    res.status(201).json({\n      success: true,\n      data: newTask\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// PUT /api/tasks/:id - Update a task\nrouter.put('/:id', async (req, res) => {\n  try {\n    const taskId = parseInt(req.params.id);\n    const updateData = req.body;\n    \n    if (isNaN(taskId)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid task ID'\n      });\n    }\n    \n    const updatedTask = await taskService.updateTask(taskId, updateData);\n    if (!updatedTask) {\n      return res.status(404).json({\n        success: false,\n        error: 'Task not found'\n      });\n    }\n    \n    res.json({\n      success: true,\n      data: updatedTask\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// DELETE /api/tasks/:id - Delete a task\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const taskId = parseInt(req.params.id);\n    \n    if (isNaN(taskId)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid task ID'\n      });\n    }\n    \n    const result = await taskService.deleteTask(taskId);\n    if (!result.deleted) {\n      return res.status(404).json({\n        success: false,\n        error: 'Task not found'\n      });\n    }\n    \n    res.json({\n      success: true,\n      message: 'Task deleted successfully'\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\nmodule.exports = router;\n```\n\n#### 2.2 Service Layer Implementation\n\n