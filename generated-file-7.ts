\n// services/taskServiceWithHooks.js\nconst TaskService = require('./taskService');\nconst { TASK_HOOKS, triggerHook } = require('../hooks/taskHooks');\n\nclass TaskServiceWithHooks extends TaskService {\n  async createTask(taskData) {\n    // Trigger before create hook\n    let processedData = { ...taskData };\n    triggerHook(TASK_HOOKS.BEFORE_CREATE, processedData);\n    \n    // Create task\n    const task = await super.createTask(processedData);\n    \n    // Trigger after create hook\n    triggerHook(TASK_HOOKS.AFTER_CREATE, task);\n    \n    return task;\n  }\n\n  async updateTask(id, updateData) {\n    // Get current task for comparison\n    const currentTask = await this.getTaskById(id);\n    if (!currentTask) return null;\n    \n    // Trigger before update hook\n    triggerHook(TASK_HOOKS.BEFORE_UPDATE, id, updateData, currentTask);\n    \n    // Check if status is changing\n    if (updateData.status && updateData.status !== currentTask.status) {\n      triggerHook(TASK_HOOKS.STATUS_CHANGED, \n        { id, ...currentTask, ...updateData }, \n        currentTask.status, \n        updateData.status\n      );\n    }\n    \n    // Update task\n    const task = await super.updateTask(id, updateData);\n    \n    // Trigger after update hook\n    triggerHook(TASK_HOOKS.AFTER_UPDATE, task);\n    \n    return task;\n  }\n\n  async deleteTask(id) {\n    // Get task for context\n    const task = await this.getTaskById(id);\n    if (!task) return { deleted: 0 };\n    \n    // Trigger before delete hook\n    triggerHook(TASK_HOOKS.BEFORE_DELETE, id, task);\n    \n    // Delete task\n    const result = await super.deleteTask(id);\n    \n    // Trigger after delete hook\n    triggerHook(TASK_HOOKS.AFTER_DELETE, id, task);\n    \n    return result;\n  }\n}\n\nmodule.exports = TaskServiceWithHooks;\n```\n\n#### 3.3 Cometa Brain Integration Points\n\n