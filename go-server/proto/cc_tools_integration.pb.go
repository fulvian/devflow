// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: proto/cc_tools_integration.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Validation request message
type ValidationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectRoot   string                 `protobuf:"bytes,1,opt,name=project_root,json=projectRoot,proto3" json:"project_root,omitempty"`                                                // Root directory of the project
	HookType      string                 `protobuf:"bytes,2,opt,name=hook_type,json=hookType,proto3" json:"hook_type,omitempty"`                                                         // Type of hook being validated (pre-commit, pre-push, etc.)
	FilePaths     []string               `protobuf:"bytes,3,rep,name=file_paths,json=filePaths,proto3" json:"file_paths,omitempty"`                                                      // Files to be validated
	Context       map[string]string      `protobuf:"bytes,4,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional context data
	TimeoutMs     int32                  `protobuf:"varint,5,opt,name=timeout_ms,json=timeoutMs,proto3" json:"timeout_ms,omitempty"`                                                     // Timeout for validation in milliseconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidationRequest) Reset() {
	*x = ValidationRequest{}
	mi := &file_proto_cc_tools_integration_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationRequest) ProtoMessage() {}

func (x *ValidationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cc_tools_integration_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationRequest.ProtoReflect.Descriptor instead.
func (*ValidationRequest) Descriptor() ([]byte, []int) {
	return file_proto_cc_tools_integration_proto_rawDescGZIP(), []int{0}
}

func (x *ValidationRequest) GetProjectRoot() string {
	if x != nil {
		return x.ProjectRoot
	}
	return ""
}

func (x *ValidationRequest) GetHookType() string {
	if x != nil {
		return x.HookType
	}
	return ""
}

func (x *ValidationRequest) GetFilePaths() []string {
	if x != nil {
		return x.FilePaths
	}
	return nil
}

func (x *ValidationRequest) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ValidationRequest) GetTimeoutMs() int32 {
	if x != nil {
		return x.TimeoutMs
	}
	return 0
}

// Project metadata message
type ProjectMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectType   string                 `protobuf:"bytes,1,opt,name=project_type,json=projectType,proto3" json:"project_type,omitempty"`                                                  // Detected project type (npm, cargo, make, etc.)
	ProjectRoot   string                 `protobuf:"bytes,2,opt,name=project_root,json=projectRoot,proto3" json:"project_root,omitempty"`                                                  // Root directory
	ConfigFiles   []string               `protobuf:"bytes,3,rep,name=config_files,json=configFiles,proto3" json:"config_files,omitempty"`                                                  // Configuration files found
	Commands      map[string]string      `protobuf:"bytes,4,rep,name=commands,proto3" json:"commands,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Available commands (lint, test, build)
	Language      string                 `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`                                                                           // Primary programming language
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectMetadata) Reset() {
	*x = ProjectMetadata{}
	mi := &file_proto_cc_tools_integration_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectMetadata) ProtoMessage() {}

func (x *ProjectMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cc_tools_integration_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectMetadata.ProtoReflect.Descriptor instead.
func (*ProjectMetadata) Descriptor() ([]byte, []int) {
	return file_proto_cc_tools_integration_proto_rawDescGZIP(), []int{1}
}

func (x *ProjectMetadata) GetProjectType() string {
	if x != nil {
		return x.ProjectType
	}
	return ""
}

func (x *ProjectMetadata) GetProjectRoot() string {
	if x != nil {
		return x.ProjectRoot
	}
	return ""
}

func (x *ProjectMetadata) GetConfigFiles() []string {
	if x != nil {
		return x.ConfigFiles
	}
	return nil
}

func (x *ProjectMetadata) GetCommands() map[string]string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *ProjectMetadata) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// Lock status message
type LockStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LockId        string                 `protobuf:"bytes,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`                // Unique lock identifier
	ProjectPath   string                 `protobuf:"bytes,2,opt,name=project_path,json=projectPath,proto3" json:"project_path,omitempty"` // Path being locked
	ProcessId     int32                  `protobuf:"varint,3,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`      // Process ID holding the lock
	AcquiredAt    int64                  `protobuf:"varint,4,opt,name=acquired_at,json=acquiredAt,proto3" json:"acquired_at,omitempty"`   // Timestamp when lock was acquired
	IsLocked      bool                   `protobuf:"varint,5,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`         // Current lock status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LockStatus) Reset() {
	*x = LockStatus{}
	mi := &file_proto_cc_tools_integration_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LockStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockStatus) ProtoMessage() {}

func (x *LockStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cc_tools_integration_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockStatus.ProtoReflect.Descriptor instead.
func (*LockStatus) Descriptor() ([]byte, []int) {
	return file_proto_cc_tools_integration_proto_rawDescGZIP(), []int{2}
}

func (x *LockStatus) GetLockId() string {
	if x != nil {
		return x.LockId
	}
	return ""
}

func (x *LockStatus) GetProjectPath() string {
	if x != nil {
		return x.ProjectPath
	}
	return ""
}

func (x *LockStatus) GetProcessId() int32 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

func (x *LockStatus) GetAcquiredAt() int64 {
	if x != nil {
		return x.AcquiredAt
	}
	return 0
}

func (x *LockStatus) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

// Validation response message
type ValidationResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Success         bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                                          // Overall validation success
	Results         []*ValidationResult    `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`                                           // Individual validation results
	Metadata        *ProjectMetadata       `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`                                         // Project metadata
	ExecutionTimeMs int64                  `protobuf:"varint,4,opt,name=execution_time_ms,json=executionTimeMs,proto3" json:"execution_time_ms,omitempty"` // Total execution time
	ErrorMessage    string                 `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`             // Error message if failed
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ValidationResponse) Reset() {
	*x = ValidationResponse{}
	mi := &file_proto_cc_tools_integration_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationResponse) ProtoMessage() {}

func (x *ValidationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cc_tools_integration_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationResponse.ProtoReflect.Descriptor instead.
func (*ValidationResponse) Descriptor() ([]byte, []int) {
	return file_proto_cc_tools_integration_proto_rawDescGZIP(), []int{3}
}

func (x *ValidationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ValidationResponse) GetResults() []*ValidationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ValidationResponse) GetMetadata() *ProjectMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ValidationResponse) GetExecutionTimeMs() int64 {
	if x != nil {
		return x.ExecutionTimeMs
	}
	return 0
}

func (x *ValidationResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Individual validation result
type ValidationResult struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Validator       string                 `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`                                       // Name of the validator (lint, test, etc.)
	Success         bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`                                          // Validation success
	Output          string                 `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`                                             // Command output
	Error           string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                                               // Error message if failed
	ExecutionTimeMs int64                  `protobuf:"varint,5,opt,name=execution_time_ms,json=executionTimeMs,proto3" json:"execution_time_ms,omitempty"` // Execution time for this validator
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ValidationResult) Reset() {
	*x = ValidationResult{}
	mi := &file_proto_cc_tools_integration_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationResult) ProtoMessage() {}

func (x *ValidationResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cc_tools_integration_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationResult.ProtoReflect.Descriptor instead.
func (*ValidationResult) Descriptor() ([]byte, []int) {
	return file_proto_cc_tools_integration_proto_rawDescGZIP(), []int{4}
}

func (x *ValidationResult) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

func (x *ValidationResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ValidationResult) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *ValidationResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ValidationResult) GetExecutionTimeMs() int64 {
	if x != nil {
		return x.ExecutionTimeMs
	}
	return 0
}

// Lock request message
type LockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectPath   string                 `protobuf:"bytes,1,opt,name=project_path,json=projectPath,proto3" json:"project_path,omitempty"`     // Path to lock
	TimeoutMs     int32                  `protobuf:"varint,2,opt,name=timeout_ms,json=timeoutMs,proto3" json:"timeout_ms,omitempty"`          // Lock timeout
	ForceRelease  bool                   `protobuf:"varint,3,opt,name=force_release,json=forceRelease,proto3" json:"force_release,omitempty"` // Force release if locked by dead process
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LockRequest) Reset() {
	*x = LockRequest{}
	mi := &file_proto_cc_tools_integration_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockRequest) ProtoMessage() {}

func (x *LockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cc_tools_integration_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockRequest.ProtoReflect.Descriptor instead.
func (*LockRequest) Descriptor() ([]byte, []int) {
	return file_proto_cc_tools_integration_proto_rawDescGZIP(), []int{5}
}

func (x *LockRequest) GetProjectPath() string {
	if x != nil {
		return x.ProjectPath
	}
	return ""
}

func (x *LockRequest) GetTimeoutMs() int32 {
	if x != nil {
		return x.TimeoutMs
	}
	return 0
}

func (x *LockRequest) GetForceRelease() bool {
	if x != nil {
		return x.ForceRelease
	}
	return false
}

var File_proto_cc_tools_integration_proto protoreflect.FileDescriptor

const file_proto_cc_tools_integration_proto_rawDesc = "" +
	"\n" +
	" proto/cc_tools_integration.proto\x12\x14cc_tools_integration\"\x9d\x02\n" +
	"\x11ValidationRequest\x12!\n" +
	"\fproject_root\x18\x01 \x01(\tR\vprojectRoot\x12\x1b\n" +
	"\thook_type\x18\x02 \x01(\tR\bhookType\x12\x1d\n" +
	"\n" +
	"file_paths\x18\x03 \x03(\tR\tfilePaths\x12N\n" +
	"\acontext\x18\x04 \x03(\v24.cc_tools_integration.ValidationRequest.ContextEntryR\acontext\x12\x1d\n" +
	"\n" +
	"timeout_ms\x18\x05 \x01(\x05R\ttimeoutMs\x1a:\n" +
	"\fContextEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa4\x02\n" +
	"\x0fProjectMetadata\x12!\n" +
	"\fproject_type\x18\x01 \x01(\tR\vprojectType\x12!\n" +
	"\fproject_root\x18\x02 \x01(\tR\vprojectRoot\x12!\n" +
	"\fconfig_files\x18\x03 \x03(\tR\vconfigFiles\x12O\n" +
	"\bcommands\x18\x04 \x03(\v23.cc_tools_integration.ProjectMetadata.CommandsEntryR\bcommands\x12\x1a\n" +
	"\blanguage\x18\x05 \x01(\tR\blanguage\x1a;\n" +
	"\rCommandsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa5\x01\n" +
	"\n" +
	"LockStatus\x12\x17\n" +
	"\alock_id\x18\x01 \x01(\tR\x06lockId\x12!\n" +
	"\fproject_path\x18\x02 \x01(\tR\vprojectPath\x12\x1d\n" +
	"\n" +
	"process_id\x18\x03 \x01(\x05R\tprocessId\x12\x1f\n" +
	"\vacquired_at\x18\x04 \x01(\x03R\n" +
	"acquiredAt\x12\x1b\n" +
	"\tis_locked\x18\x05 \x01(\bR\bisLocked\"\x84\x02\n" +
	"\x12ValidationResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12@\n" +
	"\aresults\x18\x02 \x03(\v2&.cc_tools_integration.ValidationResultR\aresults\x12A\n" +
	"\bmetadata\x18\x03 \x01(\v2%.cc_tools_integration.ProjectMetadataR\bmetadata\x12*\n" +
	"\x11execution_time_ms\x18\x04 \x01(\x03R\x0fexecutionTimeMs\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage\"\xa4\x01\n" +
	"\x10ValidationResult\x12\x1c\n" +
	"\tvalidator\x18\x01 \x01(\tR\tvalidator\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x16\n" +
	"\x06output\x18\x03 \x01(\tR\x06output\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\x12*\n" +
	"\x11execution_time_ms\x18\x05 \x01(\x03R\x0fexecutionTimeMs\"t\n" +
	"\vLockRequest\x12!\n" +
	"\fproject_path\x18\x01 \x01(\tR\vprojectPath\x12\x1d\n" +
	"\n" +
	"timeout_ms\x18\x02 \x01(\x05R\ttimeoutMs\x12#\n" +
	"\rforce_release\x18\x03 \x01(\bR\fforceRelease2\xda\x03\n" +
	"\x12CCToolsIntegration\x12d\n" +
	"\x0fValidateProject\x12'.cc_tools_integration.ValidationRequest\x1a(.cc_tools_integration.ValidationResponse\x12d\n" +
	"\x12GetProjectMetadata\x12'.cc_tools_integration.ValidationRequest\x1a%.cc_tools_integration.ProjectMetadata\x12R\n" +
	"\vAcquireLock\x12!.cc_tools_integration.LockRequest\x1a .cc_tools_integration.LockStatus\x12R\n" +
	"\vReleaseLock\x12!.cc_tools_integration.LockRequest\x1a .cc_tools_integration.LockStatus\x12P\n" +
	"\tCheckLock\x12!.cc_tools_integration.LockRequest\x1a .cc_tools_integration.LockStatusB*Z(github.com/devflow/cc-tools-server/protob\x06proto3"

var (
	file_proto_cc_tools_integration_proto_rawDescOnce sync.Once
	file_proto_cc_tools_integration_proto_rawDescData []byte
)

func file_proto_cc_tools_integration_proto_rawDescGZIP() []byte {
	file_proto_cc_tools_integration_proto_rawDescOnce.Do(func() {
		file_proto_cc_tools_integration_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_cc_tools_integration_proto_rawDesc), len(file_proto_cc_tools_integration_proto_rawDesc)))
	})
	return file_proto_cc_tools_integration_proto_rawDescData
}

var file_proto_cc_tools_integration_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_cc_tools_integration_proto_goTypes = []any{
	(*ValidationRequest)(nil),  // 0: cc_tools_integration.ValidationRequest
	(*ProjectMetadata)(nil),    // 1: cc_tools_integration.ProjectMetadata
	(*LockStatus)(nil),         // 2: cc_tools_integration.LockStatus
	(*ValidationResponse)(nil), // 3: cc_tools_integration.ValidationResponse
	(*ValidationResult)(nil),   // 4: cc_tools_integration.ValidationResult
	(*LockRequest)(nil),        // 5: cc_tools_integration.LockRequest
	nil,                        // 6: cc_tools_integration.ValidationRequest.ContextEntry
	nil,                        // 7: cc_tools_integration.ProjectMetadata.CommandsEntry
}
var file_proto_cc_tools_integration_proto_depIdxs = []int32{
	6, // 0: cc_tools_integration.ValidationRequest.context:type_name -> cc_tools_integration.ValidationRequest.ContextEntry
	7, // 1: cc_tools_integration.ProjectMetadata.commands:type_name -> cc_tools_integration.ProjectMetadata.CommandsEntry
	4, // 2: cc_tools_integration.ValidationResponse.results:type_name -> cc_tools_integration.ValidationResult
	1, // 3: cc_tools_integration.ValidationResponse.metadata:type_name -> cc_tools_integration.ProjectMetadata
	0, // 4: cc_tools_integration.CCToolsIntegration.ValidateProject:input_type -> cc_tools_integration.ValidationRequest
	0, // 5: cc_tools_integration.CCToolsIntegration.GetProjectMetadata:input_type -> cc_tools_integration.ValidationRequest
	5, // 6: cc_tools_integration.CCToolsIntegration.AcquireLock:input_type -> cc_tools_integration.LockRequest
	5, // 7: cc_tools_integration.CCToolsIntegration.ReleaseLock:input_type -> cc_tools_integration.LockRequest
	5, // 8: cc_tools_integration.CCToolsIntegration.CheckLock:input_type -> cc_tools_integration.LockRequest
	3, // 9: cc_tools_integration.CCToolsIntegration.ValidateProject:output_type -> cc_tools_integration.ValidationResponse
	1, // 10: cc_tools_integration.CCToolsIntegration.GetProjectMetadata:output_type -> cc_tools_integration.ProjectMetadata
	2, // 11: cc_tools_integration.CCToolsIntegration.AcquireLock:output_type -> cc_tools_integration.LockStatus
	2, // 12: cc_tools_integration.CCToolsIntegration.ReleaseLock:output_type -> cc_tools_integration.LockStatus
	2, // 13: cc_tools_integration.CCToolsIntegration.CheckLock:output_type -> cc_tools_integration.LockStatus
	9, // [9:14] is the sub-list for method output_type
	4, // [4:9] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_cc_tools_integration_proto_init() }
func file_proto_cc_tools_integration_proto_init() {
	if File_proto_cc_tools_integration_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_cc_tools_integration_proto_rawDesc), len(file_proto_cc_tools_integration_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_cc_tools_integration_proto_goTypes,
		DependencyIndexes: file_proto_cc_tools_integration_proto_depIdxs,
		MessageInfos:      file_proto_cc_tools_integration_proto_msgTypes,
	}.Build()
	File_proto_cc_tools_integration_proto = out.File
	file_proto_cc_tools_integration_proto_goTypes = nil
	file_proto_cc_tools_integration_proto_depIdxs = nil
}
