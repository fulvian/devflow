// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/cc_tools_integration.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CCToolsIntegration_ValidateProject_FullMethodName    = "/cc_tools_integration.CCToolsIntegration/ValidateProject"
	CCToolsIntegration_GetProjectMetadata_FullMethodName = "/cc_tools_integration.CCToolsIntegration/GetProjectMetadata"
	CCToolsIntegration_AcquireLock_FullMethodName        = "/cc_tools_integration.CCToolsIntegration/AcquireLock"
	CCToolsIntegration_ReleaseLock_FullMethodName        = "/cc_tools_integration.CCToolsIntegration/ReleaseLock"
	CCToolsIntegration_CheckLock_FullMethodName          = "/cc_tools_integration.CCToolsIntegration/CheckLock"
)

// CCToolsIntegrationClient is the client API for CCToolsIntegration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC service definition
type CCToolsIntegrationClient interface {
	// Validate project with cc-tools
	ValidateProject(ctx context.Context, in *ValidationRequest, opts ...grpc.CallOption) (*ValidationResponse, error)
	// Get project metadata
	GetProjectMetadata(ctx context.Context, in *ValidationRequest, opts ...grpc.CallOption) (*ProjectMetadata, error)
	// Acquire lock for project
	AcquireLock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockStatus, error)
	// Release lock for project
	ReleaseLock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockStatus, error)
	// Check lock status
	CheckLock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockStatus, error)
}

type cCToolsIntegrationClient struct {
	cc grpc.ClientConnInterface
}

func NewCCToolsIntegrationClient(cc grpc.ClientConnInterface) CCToolsIntegrationClient {
	return &cCToolsIntegrationClient{cc}
}

func (c *cCToolsIntegrationClient) ValidateProject(ctx context.Context, in *ValidationRequest, opts ...grpc.CallOption) (*ValidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidationResponse)
	err := c.cc.Invoke(ctx, CCToolsIntegration_ValidateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCToolsIntegrationClient) GetProjectMetadata(ctx context.Context, in *ValidationRequest, opts ...grpc.CallOption) (*ProjectMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectMetadata)
	err := c.cc.Invoke(ctx, CCToolsIntegration_GetProjectMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCToolsIntegrationClient) AcquireLock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockStatus)
	err := c.cc.Invoke(ctx, CCToolsIntegration_AcquireLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCToolsIntegrationClient) ReleaseLock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockStatus)
	err := c.cc.Invoke(ctx, CCToolsIntegration_ReleaseLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCToolsIntegrationClient) CheckLock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockStatus)
	err := c.cc.Invoke(ctx, CCToolsIntegration_CheckLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CCToolsIntegrationServer is the server API for CCToolsIntegration service.
// All implementations must embed UnimplementedCCToolsIntegrationServer
// for forward compatibility.
//
// gRPC service definition
type CCToolsIntegrationServer interface {
	// Validate project with cc-tools
	ValidateProject(context.Context, *ValidationRequest) (*ValidationResponse, error)
	// Get project metadata
	GetProjectMetadata(context.Context, *ValidationRequest) (*ProjectMetadata, error)
	// Acquire lock for project
	AcquireLock(context.Context, *LockRequest) (*LockStatus, error)
	// Release lock for project
	ReleaseLock(context.Context, *LockRequest) (*LockStatus, error)
	// Check lock status
	CheckLock(context.Context, *LockRequest) (*LockStatus, error)
	mustEmbedUnimplementedCCToolsIntegrationServer()
}

// UnimplementedCCToolsIntegrationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCCToolsIntegrationServer struct{}

func (UnimplementedCCToolsIntegrationServer) ValidateProject(context.Context, *ValidationRequest) (*ValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateProject not implemented")
}
func (UnimplementedCCToolsIntegrationServer) GetProjectMetadata(context.Context, *ValidationRequest) (*ProjectMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectMetadata not implemented")
}
func (UnimplementedCCToolsIntegrationServer) AcquireLock(context.Context, *LockRequest) (*LockStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireLock not implemented")
}
func (UnimplementedCCToolsIntegrationServer) ReleaseLock(context.Context, *LockRequest) (*LockStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseLock not implemented")
}
func (UnimplementedCCToolsIntegrationServer) CheckLock(context.Context, *LockRequest) (*LockStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLock not implemented")
}
func (UnimplementedCCToolsIntegrationServer) mustEmbedUnimplementedCCToolsIntegrationServer() {}
func (UnimplementedCCToolsIntegrationServer) testEmbeddedByValue()                            {}

// UnsafeCCToolsIntegrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CCToolsIntegrationServer will
// result in compilation errors.
type UnsafeCCToolsIntegrationServer interface {
	mustEmbedUnimplementedCCToolsIntegrationServer()
}

func RegisterCCToolsIntegrationServer(s grpc.ServiceRegistrar, srv CCToolsIntegrationServer) {
	// If the following call pancis, it indicates UnimplementedCCToolsIntegrationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CCToolsIntegration_ServiceDesc, srv)
}

func _CCToolsIntegration_ValidateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCToolsIntegrationServer).ValidateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CCToolsIntegration_ValidateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCToolsIntegrationServer).ValidateProject(ctx, req.(*ValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCToolsIntegration_GetProjectMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCToolsIntegrationServer).GetProjectMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CCToolsIntegration_GetProjectMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCToolsIntegrationServer).GetProjectMetadata(ctx, req.(*ValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCToolsIntegration_AcquireLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCToolsIntegrationServer).AcquireLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CCToolsIntegration_AcquireLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCToolsIntegrationServer).AcquireLock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCToolsIntegration_ReleaseLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCToolsIntegrationServer).ReleaseLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CCToolsIntegration_ReleaseLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCToolsIntegrationServer).ReleaseLock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCToolsIntegration_CheckLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCToolsIntegrationServer).CheckLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CCToolsIntegration_CheckLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCToolsIntegrationServer).CheckLock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CCToolsIntegration_ServiceDesc is the grpc.ServiceDesc for CCToolsIntegration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CCToolsIntegration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cc_tools_integration.CCToolsIntegration",
	HandlerType: (*CCToolsIntegrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateProject",
			Handler:    _CCToolsIntegration_ValidateProject_Handler,
		},
		{
			MethodName: "GetProjectMetadata",
			Handler:    _CCToolsIntegration_GetProjectMetadata_Handler,
		},
		{
			MethodName: "AcquireLock",
			Handler:    _CCToolsIntegration_AcquireLock_Handler,
		},
		{
			MethodName: "ReleaseLock",
			Handler:    _CCToolsIntegration_ReleaseLock_Handler,
		},
		{
			MethodName: "CheckLock",
			Handler:    _CCToolsIntegration_CheckLock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cc_tools_integration.proto",
}
