/**
 * Command Registry for Claude Code Slash Commands
 * Generated by Synthetic Code Agent: DEVFLOW-CC-INTEGRATION-001
 */

export type CommandHandler = (args: string[]) => Promise<void>;

export class CommandRegistry {
  private commands = new Map<string, CommandHandler>();

  registerCommand(commandName: string, handler: CommandHandler): void {
    this.commands.set(commandName, handler);
  }

  async executeCommand(commandName: string, args: string[]): Promise<boolean> {
    const handler = this.commands.get(commandName);
    if (!handler) {
      return false;
    }
    
    try {
      await handler(args);
      return true;
    } catch (error) {
      console.error(`Error executing command ${commandName}:`, error);
      return false;
    }
  }

  getRegisteredCommands(): string[] {
    return Array.from(this.commands.keys());
  }

  hasCommand(commandName: string): boolean {
    return this.commands.has(commandName);
  }
}

// Global command registry instance
export const commandRegistry = new CommandRegistry();