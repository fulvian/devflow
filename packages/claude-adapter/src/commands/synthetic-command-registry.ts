/**
 * Synthetic Command Registration for Claude Code
 * Generated by Synthetic Code Agent: DEVFLOW-CC-INTEGRATION-001
 * Implements slash command registration for /synthetic family commands
 */

import { SyntheticCommand } from './synthetic-command.js';
import { CommandRegistry, CommandHandler, commandRegistry } from '../command-registry.js';

// Helper function to parse command arguments and options
function parseCommandArguments(args: string[]): { prompt: string, options: Record<string, any> } {
    const options: Record<string, any> = {};
    let prompt = '';

    for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        if (arg.startsWith('--')) {
            const [key, value] = arg.split('=');
            options[key.slice(2)] = value || true;
        } else {
            prompt += arg + ' ';
        }
    }

    return { prompt: prompt.trim(), options };
}

// Command handler for /synthetic
const syntheticCommandHandler: CommandHandler = async (args: string[]) => {
    const { prompt, options } = parseCommandArguments(args);
    const syntheticCommand = new SyntheticCommand();

    try {
        const result = await syntheticCommand.execute(prompt, options);
        console.log(result);
    } catch (error) {
        console.error('Error executing synthetic command:', error);
    }
};

// Command handler for /synthetic-code
const syntheticCodeCommandHandler: CommandHandler = async (args: string[]) => {
    const { prompt, options } = parseCommandArguments(args);
    const syntheticCommand = new SyntheticCommand();

    try {
        const result = await syntheticCommand.execute(prompt, { ...options, agent: 'code' });
        console.log(result);
    } catch (error) {
        console.error('Error executing synthetic-code command:', error);
    }
};

// Command handler for /synthetic-reasoning
const syntheticReasoningCommandHandler: CommandHandler = async (args: string[]) => {
    const { prompt, options } = parseCommandArguments(args);
    const syntheticCommand = new SyntheticCommand();

    try {
        const result = await syntheticCommand.execute(prompt, { ...options, agent: 'reasoning' });
        console.log(result);
    } catch (error) {
        console.error('Error executing synthetic-reasoning command:', error);
    }
};

// Command handler for /synthetic-context
const syntheticContextCommandHandler: CommandHandler = async (args: string[]) => {
    const { prompt, options } = parseCommandArguments(args);
    const syntheticCommand = new SyntheticCommand();

    try {
        const result = await syntheticCommand.execute(prompt, { ...options, agent: 'context' });
        console.log(result);
    } catch (error) {
        console.error('Error executing synthetic-context command:', error);
    }
};

// Command handler for /synthetic-status
const syntheticStatusCommandHandler: CommandHandler = async (args: string[]) => {
    const syntheticCommand = new SyntheticCommand();

    try {
        const result = await syntheticCommand.getStatus();
        console.log(result);
    } catch (error) {
        console.error('Error executing synthetic-status command:', error);
    }
};

// Command handler for /synthetic-help
const syntheticHelpCommandHandler: CommandHandler = async (args: string[]) => {
    const syntheticCommand = new SyntheticCommand();

    try {
        const result = await syntheticCommand.getHelp();
        console.log(result);
    } catch (error) {
        console.error('Error executing synthetic-help command:', error);
    }
};

// Register all synthetic commands
export function registerSyntheticCommands(): void {
    commandRegistry.registerCommand('synthetic', syntheticCommandHandler);
    commandRegistry.registerCommand('synthetic-code', syntheticCodeCommandHandler);
    commandRegistry.registerCommand('synthetic-reasoning', syntheticReasoningCommandHandler);
    commandRegistry.registerCommand('synthetic-context', syntheticContextCommandHandler);
    commandRegistry.registerCommand('synthetic-status', syntheticStatusCommandHandler);
    commandRegistry.registerCommand('synthetic-help', syntheticHelpCommandHandler);
    
    console.log('ðŸ¤– Synthetic commands registered successfully');
    console.log('Available commands:', commandRegistry.getRegisteredCommands().filter(cmd => cmd.startsWith('synthetic')));
}

// Auto-register commands when module is imported
registerSyntheticCommands();