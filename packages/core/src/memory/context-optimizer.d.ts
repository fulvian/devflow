/**
 * Context Optimizer - Compression and Platform-specific Filtering
 * Generated by Synthetic Code Agent: DEVFLOW-MEMORY-001
 * Optimizes context for memory usage and platform requirements
 */
import type { UniversalContextFormat } from './universal-context-format.js';
export interface OptimizationOptions {
    compressionEnabled?: boolean;
    platformFilter?: string;
    maxDataSize?: number;
    relevanceThreshold?: number;
}
export declare class ContextOptimizer {
    private defaultOptions;
    compress(context: UniversalContextFormat, options?: OptimizationOptions): UniversalContextFormat;
    decompress(context: UniversalContextFormat): UniversalContextFormat;
    private filterForPlatform;
    private filterByRelevance;
    private limitDataSize;
    private truncateData;
    getOptimizationStats(context: UniversalContextFormat): {
        isCompressed: boolean;
        originalSize?: number;
        currentSize: number;
        compressionRatio?: number;
        isOptimized: boolean;
    };
    optimizeForPlatform(context: UniversalContextFormat, targetPlatform: string): Promise<UniversalContextFormat>;
}
//# sourceMappingURL=context-optimizer.d.ts.map