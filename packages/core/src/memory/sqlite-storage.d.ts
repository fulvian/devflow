/**
 * SQLite Storage for Cross-Platform Memory System
 * Generated by Synthetic Code Agent: DEVFLOW-MEMORY-001
 * WAL mode enabled for concurrent access
 */
import type { UniversalContextFormat } from './universal-context-format.js';
export declare class SQLiteStorage {
    private db;
    private dbPath;
    constructor(dbPath?: string);
    private initialize;
    getContextById(id: string): Promise<UniversalContextFormat | null>;
    getAllContexts(): Promise<UniversalContextFormat[]>;
    getContextsByPlatform(platform: string): Promise<UniversalContextFormat[]>;
    getContextsByType(contextType: string): Promise<UniversalContextFormat[]>;
    updateContext(context: UniversalContextFormat): Promise<void>;
    deleteContext(id: string): Promise<void>;
    logSyncEvent(contextId: string, eventType: string, source: string, data?: any): Promise<void>;
    getStorageStats(): Promise<{
        totalContexts: number;
        totalSize: number;
        contextsByPlatform: {
            [platform: string]: number;
        };
        contextsByType: {
            [type: string]: number;
        };
        avgCost: number;
        avgQuality: number;
    }>;
    cleanup(olderThanDays?: number): Promise<number>;
    private rowToContext;
    close(): void;
    vacuum(): Promise<void>;
}
//# sourceMappingURL=sqlite-storage.d.ts.map