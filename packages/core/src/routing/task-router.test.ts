/**
 * Advanced Task Router - Unit Tests
 * Generated by Synthetic Code Agent: DEVFLOW-ROUTER-001
 * Testing implementation with mock coordinator
 */

import { AdvancedTaskRouter, SimpleTaskClassifier, PlatformSpecializationMatrix, type MultiPlatformCoordinator } from './advanced-task-router.js';

// Mock MultiPlatformCoordinator for testing
class MockMultiPlatformCoordinator implements MultiPlatformCoordinator {
    async sendTaskToPlatform(taskId: string, platform: string, agent: string): Promise<any> {
        // Simulate task execution with realistic delays
        await new Promise(resolve => setTimeout(resolve, Math.random() * 100));
        
        return { 
            taskId, 
            platform, 
            agent, 
            status: 'completed', 
            result: 'success',
            output: `Task ${taskId} completed by ${platform}/${agent}`
        };
    }
}

// Test Suite
async function runTaskRouterTests() {
    console.log('üß™ RUNNING ADVANCED TASK ROUTER TESTS');
    console.log('=====================================');

    const coordinator = new MockMultiPlatformCoordinator();
    const router = new AdvancedTaskRouter(coordinator, ':memory:');

    const testCases = [
        {
            description: "Write a TypeScript function to sort an array",
            expectedType: "code",
            expectedPlatform: "Synthetic.new"
        },
        {
            description: "Analyze the architectural trade-offs between microservices and monolith",
            expectedType: "reasoning", 
            expectedPlatform: "Synthetic.new"
        },
        {
            description: "Review this large codebase and provide comprehensive documentation",
            expectedType: "context",
            expectedPlatform: "Synthetic.new"
        },
        {
            description: "Complex multi-step task requiring various capabilities",
            expectedType: "mixed",
            expectedPlatform: "OpenRouter"
        },
        {
            description: "Implement JWT authentication and explain the security implications",
            expectedType: "code", // Should detect code keywords
            expectedPlatform: "Synthetic.new"
        }
    ];

    let passedTests = 0;
    let totalTests = testCases.length;

    for (let i = 0; i < testCases.length; i++) {
        const testCase = testCases[i];
        console.log(`\nüìù Test Case ${i + 1}: "${testCase?.description.substring(0, 50)}..."`);

        try {
            const result = await router.route(testCase?.description || '', {}, {});
            
            console.log(`   Classification: ${result.classification.type} (${(result.classification.confidence * 100).toFixed(0)}% confidence)`);
            console.log(`   Routing: ${result.platform}/${result.agent} (${(result.confidence * 100).toFixed(0)}% confidence)`);
            
            // Validate results
            const classificationCorrect = result.classification.type === testCase?.expectedType;
            const platformCorrect = result.platform === testCase?.expectedPlatform;
            
            if (classificationCorrect && platformCorrect) {
                console.log(`   ‚úÖ PASSED`);
                passedTests++;
            } else {
                console.log(`   ‚ùå FAILED`);
                if (!classificationCorrect) {
                    console.log(`      Expected classification: ${testCase?.expectedType}, got: ${result.classification.type}`);
                }
                if (!platformCorrect) {
                    console.log(`      Expected platform: ${testCase?.expectedPlatform}, got: ${result.platform}`);
                }
            }
            
        } catch (error) {
            console.log(`   ‚ùå ERROR: ${error instanceof Error ? error.message : String(error)}`);
        }
    }

    console.log(`\nüìä TEST RESULTS: ${passedTests}/${totalTests} tests passed (${(passedTests/totalTests*100).toFixed(0)}%)`);
    
    // Test performance metrics
    console.log('\nüìà Performance Learning Test');
    router.getPerformanceMetrics().adaptRouting();
    
    // Clean up
    router.close();
    
    return passedTests === totalTests;
}

// Test individual components
function runComponentTests() {
    console.log('\nüî¨ COMPONENT TESTS');
    console.log('==================');
    
    // Test TaskClassifier
    console.log('\n1. Testing TaskClassifier...');
    const classifier = new SimpleTaskClassifier();
    
    const classifierTests = [
        { input: "write a function", expectedType: "code" },
        { input: "analyze the architecture", expectedType: "reasoning" },
        { input: "review the documentation context", expectedType: "context" }
    ];
    
    classifierTests.forEach((test, i) => {
        const result = classifier.classify(test.input);
        const passed = result.type === test.expectedType;
        console.log(`   Test ${i + 1}: ${passed ? '‚úÖ' : '‚ùå'} "${test.input}" ‚Üí ${result.type} (${(result.confidence * 100).toFixed(0)}%)`);
    });
    
    // Test PlatformMatrix
    console.log('\n2. Testing PlatformSpecializationMatrix...');
    const matrix = new PlatformSpecializationMatrix();
    
    const matrixTests = [
        { taskType: "code", expectedPlatform: "Synthetic.new" },
        { taskType: "reasoning", expectedPlatform: "Synthetic.new" },
        { taskType: "mixed", expectedPlatform: "OpenRouter" }
    ];
    
    matrixTests.forEach((test, i) => {
        const result = matrix.getPlatformForTask(test.taskType, {}, {});
        const passed = result.platform === test.expectedPlatform;
        console.log(`   Test ${i + 1}: ${passed ? '‚úÖ' : '‚ùå'} ${test.taskType} ‚Üí ${result.platform}/${result.agent}`);
    });
}

// Run all tests
export async function runAllTests(): Promise<boolean> {
    console.log('üöÄ STARTING ADVANCED TASK ROUTER TEST SUITE');
    console.log('============================================');
    
    try {
        runComponentTests();
        const integrationTestsPassed = await runTaskRouterTests();
        
        console.log('\nüéØ TEST SUITE COMPLETED');
        console.log(`Overall result: ${integrationTestsPassed ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
        
        return integrationTestsPassed;
        
    } catch (error) {
        console.error('‚ùå Test suite failed with error:', error);
        return false;
    }
}

// Auto-run tests if this file is executed directly
if (require.main === module) {
    runAllTests();
}