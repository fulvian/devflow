import { ChromaClient, Collection, Embedding, Document } from 'chromadb';
import { EmbeddingPipeline } from './embedding-pipeline';

export interface VectorDatabaseConfig {
  persistDirectory: string;
  collectionName: string;
}

export interface VectorDocument {
  id: string;
  content: string;
  embedding: number[];
  metadata: Record<string, any>;
}

export class VectorDatabase {
  private client: ChromaClient;
  private collection: Collection | null = null;
  private config: VectorDatabaseConfig;

  constructor(config: VectorDatabaseConfig) {
    this.config = config;
    this.client = new ChromaClient({
      path: `file://${config.persistDirectory}`
    });
  }

  async initialize(): Promise<void> {
    try {
      this.collection = await this.client.getOrCreateCollection({
        name: this.config.collectionName
      });
    } catch (error) {
      throw new Error(`Failed to initialize vector database: ${error}`);
    }
  }

  async addDocuments(documents: VectorDocument[]): Promise<void> {
    if (!this.collection) {
      throw new Error('Vector database not initialized');
    }

    try {
      const ids = documents.map(doc => doc.id);
      const embeddings = documents.map(doc => doc.embedding);
      const metadatas = documents.map(doc => doc.metadata);
      const contents = documents.map(doc => doc.content);

      await this.collection.add({
        ids,
        embeddings,
        metadatas,
        documents: contents
      });
    } catch (error) {
      throw new Error(`Failed to add documents: ${error}`);
    }
  }

  async query(
    queryEmbedding: number[],
    nResults: number = 10,
    filter?: Record<string, any>
  ): Promise<any[]> {
    if (!this.collection) {
      throw new Error('Vector database not initialized');
    }

    try {
      const results = await this.collection.query({
        query_embeddings: queryEmbedding,
        n_results: nResults,
        where: filter
      });

      return results;
    } catch (error) {
      throw new Error(`Query failed: ${error}`);
    }
  }

  async deleteDocuments(ids: string[]): Promise<void> {
    if (!this.collection) {
      throw new Error('Vector database not initialized');
    }

    try {
      await this.collection.delete({ ids });
    } catch (error) {
      throw new Error(`Failed to delete documents: ${error}`);
    }
  }

  async updateDocument(id: string, updates: Partial<VectorDocument>): Promise<void> {
    // Delete and re-add for update
    await this.deleteDocuments([id]);
    
    if (updates.content && updates.embedding) {
      await this.addDocuments([{
        id,
        content: updates.content,
        embedding: updates.embedding,
        metadata: updates.metadata || {}
      }]);
    }
  }

  async getCollectionStats(): Promise<{ count: number }> {
    if (!this.collection) {
      throw new Error('Vector database not initialized');
    }

    try {
      const count = await this.collection.count();
      return { count };
    } catch (error) {
      throw new Error(`Failed to get collection stats: ${error}`);
    }
  }
}
